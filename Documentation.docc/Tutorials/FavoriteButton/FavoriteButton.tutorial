@Tutorial(time: "Car Rental App") {
    @Intro(title: "Добавляем кнопку избранного") {
        В этом уроке мы добавим кнопку избранного (сердечко) для карточек машин в приложении аренды. Когда пользователь нажимает на кнопку, она меняет цвет, указывая на то, что машина добавлена в избранное. Эта задача поможет вам понять, как может выглядеть задание для разработчика уровня джуниор.
    }
    
    @Section(title: "Шаг 1: Запуск проекта") {
        @ContentAndMedia {
            Перед тем как писать код, разработчик знакомится с приложением и структурой проекта.
        }
        
        @Steps {
            @Step {
                Разработчик открывает проект в Xcode и запускает проект на симуляторе. Симулятор — это дополнительная программа, которую запускает Xcode каждый раз, когда разработчик решает проверить написанный код.
                
                @Image(source: "1")
            }
            
            @Step {
                Слева в боковом меню от редактора кода важно обратить внимание на иерархию файлов со значком ласточки — это файлы на языке Swift. Группировка файлов по папкам позволяет быстрее ориентироваться в коде. На скриншоте выделена папка Views — в ней лежат компоненты, из которых построен UI приложения.
                
                @Image(source: "2")
            }
            
            @Step {
                В папке Scenes разработчики положили файлы, отвечающие за основные экраны приложения — так называемые "сцены". Всего их две: экран предложений `OffersView` и экран избранного — `FavoritesView`.
                
                @Image(source: "3")
            }
            
            
            @Step {
                И наконец, в Models разработчики проекта положили файлы, описывающие бизнес–модель приложения. Чаще всего такие файлы описывают объекты, с которыми взаимодействует приложение или пользователь. В нашем приложении это объект Машина, и если быть точнее — Машина, доступная для аренды.
                
                @Image(source: "4")
            }
            
            @Step {
                Иерархия папок и файлов в проекте может быть любой: разработчики выбирают наиболее понятные названия и структуру, так как стройная иерархия помогает ориентироваться в проекте.
            }
        }
    }
    
    @Section(title: "Шаг 2: Модель данных RentCar") {
        @ContentAndMedia {
            Далее переходим к наиболее интересному файлу моделей — `RentCar.swift`. Разберем устройство файла так, будто вы наблюдаете за его построчным написанием с нуля.
        }
        
        @Steps {
            @Step {
                Перед вами структура ``RentCar``. Структурой её делает слово `struct`. Так Swift-разработчики описывают характеристики объектов, с которыми будет работать программа. Название структуры полностью совпадает с файлом — так удобнее ориентироваться.
                
                @Code(name: "RentCar.swift", file: FavoriteButton-Step-1-RentCar-1.swift)
            }
            
            @Step {
                Так как приложение посвящено аренде машин, то и описывает структура характеристики арендной машины. Обязательно нужно рассказать, что за машина предлагается для аренды. Разработчики проекта добавили поле `car`. Это поле будет содержать «подробности» про конкретную машину.
                
                > Важно: _Полем называют строку кода вроде `let car: Car`._ Как можно догадаться, `Car` — это тоже структура, которая описана в соседнем файле. Сейчас она нам не очень интересна.
                
                @Code(name: "RentCar.swift", file: FavoriteButton-Step-1-RentCar-2.swift)
            }
            
            @Step {
                Важной характеристикой арендной машины является её цена: поле `price`. В этом поле будет записана цена, например вот в таком формате: "3000 руб/день".
                
                @Code(name: "RentCar.swift", file: FavoriteButton-Step-1-RentCar-3.swift)
            }
            
            @Step {
                Разработчикам также было важно отличать одну арендную машину от другой, и они добавили уникальность объекту с помощью поля `id` и дополнительной характеристики структуры `Identifiable`. Все структуры, помеченные таким образом, обязательно будут иметь поле `id`. 
                
                @Code(name: "RentCar.swift", file: FavoriteButton-Step-1-RentCar-4.swift)
            }
            
            @Step {
                Поле `isFavorite` определяет, добавлена ли машина в избранное — как раз, то, что нужно для нашей задачи. Поле характеризуется типом `Bool` — это значение, которое задает истину или ложь. Иными словами, машина либо добавлена в избранное, либо нет. Изменение этого состояния — как раз цель нашей задачи.
                
                @Code(name: "RentCar.swift", file: FavoriteButton-Step-1-RentCar-5.swift)
            }
        }
    }
    
    @Section(title: "Шаг 2: Интерфейс карточки машины") {
        @ContentAndMedia {
            Теперь посмотрим на саму карточку. Здесь отображается информация о машине: её название, характеристики и цена, кнопка «Арендовать». Наша цель — добавить кнопку в правый верхний угол карточки, которая будет показывать, добавлена ли машина в избранное. 
            
            @Image(source: "5")
        }
        
        @Steps {
            @Step {
                Посмотрим на устройство файла с кодом карточки. Здесь мы впервые встречаем слово SwiftUI – это название фреймворка, который используется для создания интерфейса. Так мы понимаем, что сейчас перед нами код, написанный с использованием примитивов SwiftUI. 
                
                > Важно: Не переживайте, если сейчас от количества нового кода разбегаются глаза. Подробнее с фреймворком мы разбираемся на курсе «iOS разрботчик». Сейчас же нам достаточно лишь посмотреть на структуру файла невдаваясь в подробности за что отвечает каждая строка.
                
                @Code(name: "CarCard.swift", file: FavoriteButton-Step-2-CarCard-1.swift) {
                    @Image(source: "5")
                }
            }
            
            @Step {
                Структуры, которые можно использовать для отображения помечаются характеристикой `View` сразу после двоеточия. У таких структур обязательно будет поле `body`. В нём и строится отображение.
                
                @Code(name: "CarCard.swift", file: FavoriteButton-Step-2-CarCard-1-2.swift) {
                    @Image(source: "5")
                }
            }
            
            @Step {
                Дальше все собирается из кирпичиков – примитивов вроде VStack и HStack, Text, Image и Button. 
                
                @Code(name: "CarCard.swift", file: FavoriteButton-Step-2-CarCard-1-3.swift) {
                    @Image(source: "5")
                }
            }
            
            @Step {
                Чтобы понять примитивы VStack и HStack, вы можете представить стопку книг. Книги лежащие на столе, друг над другом — это вертикальный (vertcial) VStack, а книги, стоящие аккуратно на полке – это горизонатльный (horizontal) HStack. Чтобы задать расположение нескольких примитивов друг относительно друга и упорядоченно по одному из направлений, понадобится один из стеков. В примере видно, что в вертикальный стек вложили горизонтальный.
                
                @Code(name: "CarCard.swift", file: FavoriteButton-Step-2-CarCard-2.swift) {
                    @Image(source: "5")
                }
            }
            
            @Step {
                Вложенность примитивов в SwiftUI задается фигурными скобками и оступом от края на один таб. Один из вложенных элементов в этой карточке – Text. В них помещены название машины и ее тип, `offer.car.name` и `offer.car.type`. Так как они сложены в VStaсk, то и отображаться они будут друг под другом соответсвтенно. 
                
                @Code(name: "CarCard.swift", file: FavoriteButton-Step-2-CarCard-3.swift) {
                    @Image(source: "5")
                }
            }
            
            @Step {
                Посмотрим на вторую часть этой карточки – ту, где указана цена и расположена кнопка «Арендовать».
                
                @Code(name: "CarCard.swift", file: FavoriteButton-Step-2-CarCard-4.swift) {
                    @Image(source: "5")
                }
            }
            
            @Step {
                Этот блок задан горизонтально через HStack с двумя вложенными VStack. Внутри него вертикально собраны изображение машины и стоимость аренды, и вторым вертикальным блоком собраны характеристики машины и кнопка аренды.
                
                @Code(name: "CarCard.swift", file: FavoriteButton-Step-2-CarCard-5.swift) {
                    @Image(source: "5")
                }
            }
            
            @Step {
                Изображение машины задается с помощью примитива `Image`, для его работы нужно задать название файла внутри скобок.
                
                @Code(name: "CarCard.swift", file: FavoriteButton-Step-2-CarCard-6.swift) {
                    @Image(source: "5")
                }
            }
            
            @Step {
                Кнопка задается уже более сложным примитивом `Button`. Этому примитиву нужно задать действие в поле `action`, а также задать, что отобразить на кнопке – в данном случае использовали примитив Text задан в поле `label`. Действие задано конструкцией, выступающией в роли "передачика", чтобы экран с карточками понимал, когда кнопка нажата. Нам нужна похожая кнопка для выполнения задачи.
                
                @Code(name: "CarCard.swift", file: FavoriteButton-Step-2-CarCard-7.swift) {
                    @Image(source: "5")
                }
            }
        }
    }
    
    @Section(title: "Шаг 3: Добавляем кнопку избранного") {
        @ContentAndMedia {
            Теперь добавим кнопку с изображением сердечка. Её нужно разместить в правом верхнем углу – напротив названия машины.
        }
        
        @Steps {
            @Step {
                Для начала нам нужно найти блок с названием машины и найти подходящее место для "вложения кнопки". Вертикальный блок с именем как раз вложен в горизонтальный HStack. 
                
                @Code(name: "CarCard.swift", file: FavoriteButton-Step-3-CarCard-1.swift) {
                    @Image(source: "5")
                }
            }
            
            @Step {
                Добавим заготовку для кнопки:
                
                @Code(name: "CarCard.swift", file: FavoriteButton-Step-3-CarCard-2.swift)
            }
            
            @Step {
                Чтобы изменить состояние избранности, понадобится повзаимодействовать с полем `isFavorite` у структруы `RentCar`. Данные машины заданы в поле `offer`, обращаемся к нему, чтобы переключить состояние избранности из одного в другое `offer.isFavorite.toggle()`.  Фраза `toggle()` – работает как выключатель света – вкл, выкл.
                
                @Code(name: "CarCard.swift", file: FavoriteButton-Step-3-CarCard-3.swift)
            }
            
            @Step {
                Займемся отображением. Так как кнопка графическая, то и примитив нужен для изображения – `Image`. В данном случае нам нужно два изображения для двух случаев: "heart.fill" – заполненное сердце для состояния добавленного в избранное, "heart" – сердце с обводкой для противоположного случая. Чтобы выбирать в каком случае какую показать, нужен примитив условий if-else. Его и используем, он звучит буквально так: «Если машина добавлена в избранное покажи "heart.fill", иначе – "heart"».
                
                @Code(name: "CarCard.swift", file: FavoriteButton-Step-3-CarCard-4.swift)
            }
            
            @Step {
                Сейчас кнопка отображается синим цветом. По условиям задачи, кнопка избранно в выбранном состоянии должна показываться красным цветом. Покрасим кнопку, настроим отсупы и размеры. Настройка `.foregroundStyle(.red)` – задает стиль кнопке красным цветом. Остальные настройки отвечают за расположение и размер.
                
                @Code(name: "CarCard.swift", file: FavoriteButton-Step-3-CarCard-5.swift) {
                    @Image(source: "8")
                }
            }
        }
    }
    
    @Section(title: "Заключение") {
        @ContentAndMedia {
            Теперь можно проверить работу приложения. Можно запустить проект и проверить кнопку избранного на карточке машины: убедиться, что она меняет цвет.
        }
        @Steps {
            @Step(title: "Подведём итоги") {
                В этом туториале мы разобрали небольшую задачку по добавлению кнопки. Мы познакомились с основными примитивами SwiftUI, посмотрели на устройство проекта и немного затронули ключевые слова языка, вроде struct, Bool, if-else. Это капля в море – самое интересное на курсе iOS-разработки!
                
                @Image(source: "9")
            }
        }
    }
}
